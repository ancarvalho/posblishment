// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';

import 'src/entities/bill.dart';
import 'src/entities/category.dart';
import 'src/entities/item.dart';
import 'src/entities/orders.dart';
import 'src/entities/payment.dart';
import 'src/entities/product.dart';
import 'src/entities/product_variation.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 1859620717060893617),
      name: 'Bill',
      lastPropertyId: const IdUid(6, 3944199347852112354),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 5398715258729813818),
            name: 'objectboxID',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 3735839730736229947),
            name: 'id',
            type: 9,
            flags: 2080,
            indexId: const IdUid(1, 5156299383125161555)),
        ModelProperty(
            id: const IdUid(3, 609775512293680514),
            name: 'table',
            type: 6,
            flags: 40,
            indexId: const IdUid(2, 5715272427785199546)),
        ModelProperty(
            id: const IdUid(4, 8978841869858709161),
            name: 'customerName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 5636801623254534763),
            name: 'createdAt',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 3944199347852112354),
            name: 'updatedAt',
            type: 10,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(2, 7433195660803009841),
      name: 'Category',
      lastPropertyId: const IdUid(6, 2294691449311362541),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 4781375551273200236),
            name: 'objectboxID',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 4479931425336332855),
            name: 'id',
            type: 9,
            flags: 2080,
            indexId: const IdUid(3, 1378348810076422654)),
        ModelProperty(
            id: const IdUid(3, 2305308168552684488),
            name: 'name',
            type: 9,
            flags: 2080,
            indexId: const IdUid(4, 1156431923611943685)),
        ModelProperty(
            id: const IdUid(4, 6351340392800369458),
            name: 'description',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 5178730026910049742),
            name: 'createdAt',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 2294691449311362541),
            name: 'updatedAt',
            type: 10,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(3, 6269384682134974757),
      name: 'Item',
      lastPropertyId: const IdUid(9, 2597142418501538001),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 8985586620669575818),
            name: 'objectboxID',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 5021756711307933284),
            name: 'id',
            type: 9,
            flags: 2080,
            indexId: const IdUid(5, 2058606667476260431)),
        ModelProperty(
            id: const IdUid(3, 1599884053989498094),
            name: 'price',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 2553213255095943732),
            name: 'quantity',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 921777728220074692),
            name: 'totalQuantity',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 8543745110472863824),
            name: 'productIdId',
            type: 11,
            flags: 520,
            indexId: const IdUid(6, 7259983259323059039),
            relationTarget: 'Product'),
        ModelProperty(
            id: const IdUid(7, 3262570978339285104),
            name: 'orderIdId',
            type: 11,
            flags: 520,
            indexId: const IdUid(7, 5055326357447167733),
            relationTarget: 'Orders'),
        ModelProperty(
            id: const IdUid(8, 3912631287383432684),
            name: 'createdAt',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 2597142418501538001),
            name: 'updatedAt',
            type: 10,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(5, 4308106016559861507),
      name: 'Payment',
      lastPropertyId: const IdUid(6, 4449536473797003416),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 7338906050927301761),
            name: 'objectboxID',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 3292748954209097939),
            name: 'id',
            type: 9,
            flags: 2080,
            indexId: const IdUid(10, 4982026128378472825)),
        ModelProperty(
            id: const IdUid(3, 4234210720059389142),
            name: 'value',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 4103324668921861508),
            name: 'createdAt',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 1476035313289264055),
            name: 'updatedAt',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 4449536473797003416),
            name: 'billIDId',
            type: 11,
            flags: 520,
            indexId: const IdUid(11, 2560245672438717637),
            relationTarget: 'Bill')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(6, 2147735012515667615),
      name: 'Product',
      lastPropertyId: const IdUid(9, 1643239567268071442),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 62424997773004246),
            name: 'objectboxID',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 3092213592541291056),
            name: 'id',
            type: 9,
            flags: 2080,
            indexId: const IdUid(12, 2018750061075508529)),
        ModelProperty(
            id: const IdUid(3, 5902025669196024658),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 8654464238260227697),
            name: 'description',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 6074109270991456151),
            name: 'price',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 4477866204746780013),
            name: 'preparable',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 7326834198036929509),
            name: 'categoryIDId',
            type: 11,
            flags: 520,
            indexId: const IdUid(13, 49406380535596113),
            relationTarget: 'Category'),
        ModelProperty(
            id: const IdUid(8, 195014190765844243),
            name: 'createdAt',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 1643239567268071442),
            name: 'updatedAt',
            type: 10,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(7, 7135661172107724875),
      name: 'ProductVariation',
      lastPropertyId: const IdUid(8, 7401449085130698634),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 4307839712595123368),
            name: 'objectboxID',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 489355840140428027),
            name: 'id',
            type: 9,
            flags: 2080,
            indexId: const IdUid(14, 8656095307796769923)),
        ModelProperty(
            id: const IdUid(3, 953345509405732389),
            name: 'name',
            type: 9,
            flags: 2080,
            indexId: const IdUid(15, 1002689338453227858)),
        ModelProperty(
            id: const IdUid(4, 7868066449008879522),
            name: 'priceVariation',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 4085622812610336989),
            name: 'price',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 9100458682012496781),
            name: 'productIDId',
            type: 11,
            flags: 520,
            indexId: const IdUid(16, 5873763523018940432),
            relationTarget: 'Product'),
        ModelProperty(
            id: const IdUid(7, 4706931831139579867),
            name: 'createdAt',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 7401449085130698634),
            name: 'updatedAt',
            type: 10,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(8, 183548262464723192),
      name: 'Orders',
      lastPropertyId: const IdUid(6, 646545178678759551),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 6886957790023827763),
            name: 'objectboxID',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 4501313226879472187),
            name: 'id',
            type: 9,
            flags: 2080,
            indexId: const IdUid(18, 6663358596113513749)),
        ModelProperty(
            id: const IdUid(3, 944502468847946651),
            name: 'observation',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 1929430857066715903),
            name: 'createdAt',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 5098745701109517969),
            name: 'updatedAt',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 646545178678759551),
            name: 'billId',
            type: 11,
            flags: 520,
            indexId: const IdUid(19, 7117354508322562351),
            relationTarget: 'Bill')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Store openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) =>
    Store(getObjectBoxModel(),
        directory: directory,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(8, 183548262464723192),
      lastIndexId: const IdUid(19, 7117354508322562351),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [240172070869055404],
      retiredIndexUids: const [560318608573986595],
      retiredPropertyUids: const [
        7625863560273689253,
        9088267434197104409,
        4821316491602739746,
        8562701804462598701,
        2892357664030049793,
        6760144249985514015,
        7535240939964134855
      ],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    Bill: EntityDefinition<Bill>(
        model: _entities[0],
        toOneRelations: (Bill object) => [],
        toManyRelations: (Bill object) => {},
        getId: (Bill object) => object.objectboxID,
        setId: (Bill object, int id) {
          object.objectboxID = id;
        },
        objectToFB: (Bill object, fb.Builder fbb) {
          final idOffset = fbb.writeString(object.id);
          final customerNameOffset = object.customerName == null
              ? null
              : fbb.writeString(object.customerName!);
          fbb.startTable(7);
          fbb.addInt64(0, object.objectboxID);
          fbb.addOffset(1, idOffset);
          fbb.addInt64(2, object.table);
          fbb.addOffset(3, customerNameOffset);
          fbb.addInt64(4, object.createdAt?.millisecondsSinceEpoch);
          fbb.addInt64(5, object.updatedAt?.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.objectboxID;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final createdAtValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 12);
          final updatedAtValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 14);
          final object = Bill(
              objectboxID:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              id: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              table: const fb.Int64Reader()
                  .vTableGetNullable(buffer, rootOffset, 8),
              customerName: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10),
              createdAt: createdAtValue == null
                  ? null
                  : DateTime.fromMillisecondsSinceEpoch(createdAtValue),
              updatedAt: updatedAtValue == null
                  ? null
                  : DateTime.fromMillisecondsSinceEpoch(updatedAtValue));

          return object;
        }),
    Category: EntityDefinition<Category>(
        model: _entities[1],
        toOneRelations: (Category object) => [],
        toManyRelations: (Category object) => {},
        getId: (Category object) => object.objectboxID,
        setId: (Category object, int id) {
          object.objectboxID = id;
        },
        objectToFB: (Category object, fb.Builder fbb) {
          final idOffset = fbb.writeString(object.id);
          final nameOffset = fbb.writeString(object.name);
          final descriptionOffset = fbb.writeString(object.description);
          fbb.startTable(7);
          fbb.addInt64(0, object.objectboxID);
          fbb.addOffset(1, idOffset);
          fbb.addOffset(2, nameOffset);
          fbb.addOffset(3, descriptionOffset);
          fbb.addInt64(4, object.createdAt?.millisecondsSinceEpoch);
          fbb.addInt64(5, object.updatedAt?.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.objectboxID;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final createdAtValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 12);
          final updatedAtValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 14);
          final object = Category(
              objectboxID:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              id: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              description: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''),
              createdAt: createdAtValue == null
                  ? null
                  : DateTime.fromMillisecondsSinceEpoch(createdAtValue),
              updatedAt: updatedAtValue == null
                  ? null
                  : DateTime.fromMillisecondsSinceEpoch(updatedAtValue));

          return object;
        }),
    Item: EntityDefinition<Item>(
        model: _entities[2],
        toOneRelations: (Item object) => [object.productId, object.orderId],
        toManyRelations: (Item object) => {},
        getId: (Item object) => object.objectboxID,
        setId: (Item object, int id) {
          object.objectboxID = id;
        },
        objectToFB: (Item object, fb.Builder fbb) {
          final idOffset = fbb.writeString(object.id);
          fbb.startTable(10);
          fbb.addInt64(0, object.objectboxID);
          fbb.addOffset(1, idOffset);
          fbb.addFloat64(2, object.price);
          fbb.addInt64(3, object.quantity);
          fbb.addInt64(4, object.totalQuantity);
          fbb.addInt64(5, object.productId.targetId);
          fbb.addInt64(6, object.orderId.targetId);
          fbb.addInt64(7, object.createdAt?.millisecondsSinceEpoch);
          fbb.addInt64(8, object.updatedAt?.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.objectboxID;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final createdAtValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 18);
          final updatedAtValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 20);
          final object = Item(
              objectboxID:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              id: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              price:
                  const fb.Float64Reader().vTableGet(buffer, rootOffset, 8, 0),
              totalQuantity:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0),
              quantity:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0),
              createdAt: createdAtValue == null
                  ? null
                  : DateTime.fromMillisecondsSinceEpoch(createdAtValue),
              updatedAt: updatedAtValue == null
                  ? null
                  : DateTime.fromMillisecondsSinceEpoch(updatedAtValue));
          object.productId.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          object.productId.attach(store);
          object.orderId.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0);
          object.orderId.attach(store);
          return object;
        }),
    Payment: EntityDefinition<Payment>(
        model: _entities[3],
        toOneRelations: (Payment object) => [object.billID],
        toManyRelations: (Payment object) => {},
        getId: (Payment object) => object.objectboxID,
        setId: (Payment object, int id) {
          object.objectboxID = id;
        },
        objectToFB: (Payment object, fb.Builder fbb) {
          final idOffset = fbb.writeString(object.id);
          fbb.startTable(7);
          fbb.addInt64(0, object.objectboxID);
          fbb.addOffset(1, idOffset);
          fbb.addFloat64(2, object.value);
          fbb.addInt64(3, object.createdAt?.millisecondsSinceEpoch);
          fbb.addInt64(4, object.updatedAt?.millisecondsSinceEpoch);
          fbb.addInt64(5, object.billID.targetId);
          fbb.finish(fbb.endTable());
          return object.objectboxID;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final createdAtValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 10);
          final updatedAtValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 12);
          final object = Payment(
              objectboxID:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              id: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              value:
                  const fb.Float64Reader().vTableGet(buffer, rootOffset, 8, 0),
              createdAt: createdAtValue == null
                  ? null
                  : DateTime.fromMillisecondsSinceEpoch(createdAtValue),
              updatedAt: updatedAtValue == null
                  ? null
                  : DateTime.fromMillisecondsSinceEpoch(updatedAtValue));
          object.billID.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          object.billID.attach(store);
          return object;
        }),
    Product: EntityDefinition<Product>(
        model: _entities[4],
        toOneRelations: (Product object) => [object.categoryID],
        toManyRelations: (Product object) => {},
        getId: (Product object) => object.objectboxID,
        setId: (Product object, int id) {
          object.objectboxID = id;
        },
        objectToFB: (Product object, fb.Builder fbb) {
          final idOffset =
              object.id == null ? null : fbb.writeString(object.id!);
          final nameOffset = fbb.writeString(object.name);
          final descriptionOffset = object.description == null
              ? null
              : fbb.writeString(object.description!);
          fbb.startTable(10);
          fbb.addInt64(0, object.objectboxID);
          fbb.addOffset(1, idOffset);
          fbb.addOffset(2, nameOffset);
          fbb.addOffset(3, descriptionOffset);
          fbb.addFloat64(4, object.price);
          fbb.addBool(5, object.preparable);
          fbb.addInt64(6, object.categoryID.targetId);
          fbb.addInt64(7, object.createdAt?.millisecondsSinceEpoch);
          fbb.addInt64(8, object.updatedAt?.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.objectboxID;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final createdAtValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 18);
          final updatedAtValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 20);
          final object = Product(
              objectboxID:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              id: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 6),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              description: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10),
              price:
                  const fb.Float64Reader().vTableGet(buffer, rootOffset, 12, 0),
              preparable: const fb.BoolReader()
                  .vTableGetNullable(buffer, rootOffset, 14),
              createdAt: createdAtValue == null
                  ? null
                  : DateTime.fromMillisecondsSinceEpoch(createdAtValue),
              updatedAt: updatedAtValue == null
                  ? null
                  : DateTime.fromMillisecondsSinceEpoch(updatedAtValue));
          object.categoryID.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0);
          object.categoryID.attach(store);
          return object;
        }),
    ProductVariation: EntityDefinition<ProductVariation>(
        model: _entities[5],
        toOneRelations: (ProductVariation object) => [object.productID],
        toManyRelations: (ProductVariation object) => {},
        getId: (ProductVariation object) => object.objectboxID,
        setId: (ProductVariation object, int id) {
          object.objectboxID = id;
        },
        objectToFB: (ProductVariation object, fb.Builder fbb) {
          final idOffset = fbb.writeString(object.id);
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(9);
          fbb.addInt64(0, object.objectboxID);
          fbb.addOffset(1, idOffset);
          fbb.addOffset(2, nameOffset);
          fbb.addBool(3, object.priceVariation);
          fbb.addFloat64(4, object.price);
          fbb.addInt64(5, object.productID.targetId);
          fbb.addInt64(6, object.createdAt?.millisecondsSinceEpoch);
          fbb.addInt64(7, object.updatedAt?.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.objectboxID;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final createdAtValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 16);
          final updatedAtValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 18);
          final object = ProductVariation(
              objectboxID:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              id: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              priceVariation: const fb.BoolReader()
                  .vTableGetNullable(buffer, rootOffset, 10),
              price: const fb.Float64Reader()
                  .vTableGetNullable(buffer, rootOffset, 12),
              createdAt: createdAtValue == null
                  ? null
                  : DateTime.fromMillisecondsSinceEpoch(createdAtValue),
              updatedAt: updatedAtValue == null
                  ? null
                  : DateTime.fromMillisecondsSinceEpoch(updatedAtValue));
          object.productID.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          object.productID.attach(store);
          return object;
        }),
    Orders: EntityDefinition<Orders>(
        model: _entities[6],
        toOneRelations: (Orders object) => [object.bill],
        toManyRelations: (Orders object) => {},
        getId: (Orders object) => object.objectboxID,
        setId: (Orders object, int id) {
          object.objectboxID = id;
        },
        objectToFB: (Orders object, fb.Builder fbb) {
          final idOffset = fbb.writeString(object.id);
          final observationOffset = object.observation == null
              ? null
              : fbb.writeString(object.observation!);
          fbb.startTable(7);
          fbb.addInt64(0, object.objectboxID);
          fbb.addOffset(1, idOffset);
          fbb.addOffset(2, observationOffset);
          fbb.addInt64(3, object.createdAt?.millisecondsSinceEpoch);
          fbb.addInt64(4, object.updatedAt?.millisecondsSinceEpoch);
          fbb.addInt64(5, object.bill.targetId);
          fbb.finish(fbb.endTable());
          return object.objectboxID;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final createdAtValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 10);
          final updatedAtValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 12);
          final object = Orders(
              objectboxID:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              id: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              observation: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8),
              createdAt: createdAtValue == null
                  ? null
                  : DateTime.fromMillisecondsSinceEpoch(createdAtValue),
              updatedAt: updatedAtValue == null
                  ? null
                  : DateTime.fromMillisecondsSinceEpoch(updatedAtValue));
          object.bill.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          object.bill.attach(store);
          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [Bill] entity fields to define ObjectBox queries.
class Bill_ {
  /// see [Bill.objectboxID]
  static final objectboxID =
      QueryIntegerProperty<Bill>(_entities[0].properties[0]);

  /// see [Bill.id]
  static final id = QueryStringProperty<Bill>(_entities[0].properties[1]);

  /// see [Bill.table]
  static final table = QueryIntegerProperty<Bill>(_entities[0].properties[2]);

  /// see [Bill.customerName]
  static final customerName =
      QueryStringProperty<Bill>(_entities[0].properties[3]);

  /// see [Bill.createdAt]
  static final createdAt =
      QueryIntegerProperty<Bill>(_entities[0].properties[4]);

  /// see [Bill.updatedAt]
  static final updatedAt =
      QueryIntegerProperty<Bill>(_entities[0].properties[5]);
}

/// [Category] entity fields to define ObjectBox queries.
class Category_ {
  /// see [Category.objectboxID]
  static final objectboxID =
      QueryIntegerProperty<Category>(_entities[1].properties[0]);

  /// see [Category.id]
  static final id = QueryStringProperty<Category>(_entities[1].properties[1]);

  /// see [Category.name]
  static final name = QueryStringProperty<Category>(_entities[1].properties[2]);

  /// see [Category.description]
  static final description =
      QueryStringProperty<Category>(_entities[1].properties[3]);

  /// see [Category.createdAt]
  static final createdAt =
      QueryIntegerProperty<Category>(_entities[1].properties[4]);

  /// see [Category.updatedAt]
  static final updatedAt =
      QueryIntegerProperty<Category>(_entities[1].properties[5]);
}

/// [Item] entity fields to define ObjectBox queries.
class Item_ {
  /// see [Item.objectboxID]
  static final objectboxID =
      QueryIntegerProperty<Item>(_entities[2].properties[0]);

  /// see [Item.id]
  static final id = QueryStringProperty<Item>(_entities[2].properties[1]);

  /// see [Item.price]
  static final price = QueryDoubleProperty<Item>(_entities[2].properties[2]);

  /// see [Item.quantity]
  static final quantity =
      QueryIntegerProperty<Item>(_entities[2].properties[3]);

  /// see [Item.totalQuantity]
  static final totalQuantity =
      QueryIntegerProperty<Item>(_entities[2].properties[4]);

  /// see [Item.productId]
  static final productId =
      QueryRelationToOne<Item, Product>(_entities[2].properties[5]);

  /// see [Item.orderId]
  static final orderId =
      QueryRelationToOne<Item, Orders>(_entities[2].properties[6]);

  /// see [Item.createdAt]
  static final createdAt =
      QueryIntegerProperty<Item>(_entities[2].properties[7]);

  /// see [Item.updatedAt]
  static final updatedAt =
      QueryIntegerProperty<Item>(_entities[2].properties[8]);
}

/// [Payment] entity fields to define ObjectBox queries.
class Payment_ {
  /// see [Payment.objectboxID]
  static final objectboxID =
      QueryIntegerProperty<Payment>(_entities[3].properties[0]);

  /// see [Payment.id]
  static final id = QueryStringProperty<Payment>(_entities[3].properties[1]);

  /// see [Payment.value]
  static final value = QueryDoubleProperty<Payment>(_entities[3].properties[2]);

  /// see [Payment.createdAt]
  static final createdAt =
      QueryIntegerProperty<Payment>(_entities[3].properties[3]);

  /// see [Payment.updatedAt]
  static final updatedAt =
      QueryIntegerProperty<Payment>(_entities[3].properties[4]);

  /// see [Payment.billID]
  static final billID =
      QueryRelationToOne<Payment, Bill>(_entities[3].properties[5]);
}

/// [Product] entity fields to define ObjectBox queries.
class Product_ {
  /// see [Product.objectboxID]
  static final objectboxID =
      QueryIntegerProperty<Product>(_entities[4].properties[0]);

  /// see [Product.id]
  static final id = QueryStringProperty<Product>(_entities[4].properties[1]);

  /// see [Product.name]
  static final name = QueryStringProperty<Product>(_entities[4].properties[2]);

  /// see [Product.description]
  static final description =
      QueryStringProperty<Product>(_entities[4].properties[3]);

  /// see [Product.price]
  static final price = QueryDoubleProperty<Product>(_entities[4].properties[4]);

  /// see [Product.preparable]
  static final preparable =
      QueryBooleanProperty<Product>(_entities[4].properties[5]);

  /// see [Product.categoryID]
  static final categoryID =
      QueryRelationToOne<Product, Category>(_entities[4].properties[6]);

  /// see [Product.createdAt]
  static final createdAt =
      QueryIntegerProperty<Product>(_entities[4].properties[7]);

  /// see [Product.updatedAt]
  static final updatedAt =
      QueryIntegerProperty<Product>(_entities[4].properties[8]);
}

/// [ProductVariation] entity fields to define ObjectBox queries.
class ProductVariation_ {
  /// see [ProductVariation.objectboxID]
  static final objectboxID =
      QueryIntegerProperty<ProductVariation>(_entities[5].properties[0]);

  /// see [ProductVariation.id]
  static final id =
      QueryStringProperty<ProductVariation>(_entities[5].properties[1]);

  /// see [ProductVariation.name]
  static final name =
      QueryStringProperty<ProductVariation>(_entities[5].properties[2]);

  /// see [ProductVariation.priceVariation]
  static final priceVariation =
      QueryBooleanProperty<ProductVariation>(_entities[5].properties[3]);

  /// see [ProductVariation.price]
  static final price =
      QueryDoubleProperty<ProductVariation>(_entities[5].properties[4]);

  /// see [ProductVariation.productID]
  static final productID =
      QueryRelationToOne<ProductVariation, Product>(_entities[5].properties[5]);

  /// see [ProductVariation.createdAt]
  static final createdAt =
      QueryIntegerProperty<ProductVariation>(_entities[5].properties[6]);

  /// see [ProductVariation.updatedAt]
  static final updatedAt =
      QueryIntegerProperty<ProductVariation>(_entities[5].properties[7]);
}

/// [Orders] entity fields to define ObjectBox queries.
class Orders_ {
  /// see [Orders.objectboxID]
  static final objectboxID =
      QueryIntegerProperty<Orders>(_entities[6].properties[0]);

  /// see [Orders.id]
  static final id = QueryStringProperty<Orders>(_entities[6].properties[1]);

  /// see [Orders.observation]
  static final observation =
      QueryStringProperty<Orders>(_entities[6].properties[2]);

  /// see [Orders.createdAt]
  static final createdAt =
      QueryIntegerProperty<Orders>(_entities[6].properties[3]);

  /// see [Orders.updatedAt]
  static final updatedAt =
      QueryIntegerProperty<Orders>(_entities[6].properties[4]);

  /// see [Orders.bill]
  static final bill =
      QueryRelationToOne<Orders, Bill>(_entities[6].properties[5]);
}
